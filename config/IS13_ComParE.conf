///////////////////////////////////////////////////////////////////////////////////////
///////// > openSMILE configuration file for ComParE <               //////////////////
/////////                                                            //////////////////
///////// (c) 2014 by audEERING                                      //////////////////
/////////     All rights reserved. See file COPYING for details.     //////////////////
///////////////////////////////////////////////////////////////////////////////////////



;;;;;;; component list ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[componentInstances:cComponentManager]
instance[dataMemory].type=cDataMemory
instance[arffsink].type=cArffSink
printLevelStats=0


;;;;;;;;;;;;;;;;;;;;;;;;;;;; main section ;;;;;;;;;;;;;;;;;;;;;;;;;;;

\{shared/standard_wave_input.conf.inc}
\{IS13_ComParE_core.lld.conf.inc}
\{IS13_ComParE_core.func.conf.inc}

;;;;;;;;; prepare features for standard output module

[componentInstances:cComponentManager]
instance[is13_lldconcat].type=cVectorConcat
instance[is13_llddeconcat].type=cVectorConcat
instance[is13_funcconcat].type=cVectorConcat

[waveSource:cWaveSource]
writer.dmLevel = wave
filename = \cm[inputfile(I){input.wav}:name of input wave file]
monoMixdown = 1

[is13_lldconcat:cVectorConcat]
reader.dmLevel = is13_lld_nzsmo;is13_lldA_smo;is13_lldB_smo
writer.dmLevel = lld
includeSingleElementFields = 1

[is13_llddeconcat:cVectorConcat]
reader.dmLevel = is13_lld_nzsmo_de;is13_lldA_smo_de;is13_lldB_smo_de
writer.dmLevel = lld_de
includeSingleElementFields = 1

[is13_funcconcat:cVectorConcat]
reader.dmLevel = is13_functionalsA;is13_functionalsB;is13_functionalsNz;is13_functionalsF0;is13_functionalsLLD;is13_functionalsDelta
writer.dmLevel = func
includeSingleElementFields = 1

;\{shared/standard_data_output.conf.inc}

[arffsink:cArffSink]
reader.dmLevel=func;
filename=\cm[output(O){a11.arff}:output arff file for feature data]
append=1
frameIndex=0
frameTime=0
relation=avec2011
instanceName=\cm[instname{unlabelled}:name of file which will be saved in arff file]
 ; name of class label
class[0].name = emotion
 ; list of nominal classes OR "numeric"
class[0].type = {anger,sadness,happiness,disgust,fear,neutral,surprise}
 ; the class label or value for the current instance
target[0].all = \cm[classlabel(a){unassigned}:instance class label]
 ; append to an existing file, so multiple calls of SMILExtract on different
 ; input files append to the same output ARFF file
